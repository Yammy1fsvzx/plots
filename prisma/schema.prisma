generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  role      String    @default("USER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
}

model Contact {
  id           String         @id @default(cuid())
  phone        String
  email        String
  address      String
  updatedAt    DateTime       @updatedAt
  socialMedia  SocialMedia?
  workingHours WorkingHours[]
}

model WorkingHours {
  id           String  @id @default(cuid())
  dayOfWeek    String
  openTime     String
  closeTime    String
  isWorkingDay Boolean @default(true)
  contactId    String
  contact      Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model SocialMedia {
  id        String  @id @default(cuid())
  whatsapp  String?
  telegram  String?
  instagram String?
  contactId String  @unique
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model Plot {
  id               String              @id @default(cuid())
  title            String
  slug             String              @unique
  description      String
  area             Float
  price            Float
  pricePerMeter    Float
  region           String
  locality         String
  landUseType      String
  landCategory     String
  status           String              @default("AVAILABLE")
  isVisible        Boolean             @default(true)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  applications     Application[]
  cadastralNumbers PlotCadastral[]
  communications   PlotCommunication[]
  documents        PlotDocument[]
  features         PlotFeature[]
  media            PlotMedia[]
}

model PlotMedia {
  id        String   @id @default(cuid())
  name      String
  url       String
  order     Int
  type      String
  plotId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plot      Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)

  @@index([plotId])
  @@index([order])
}

model PlotDocument {
  id        String   @id @default(cuid())
  name      String
  title     String
  url       String
  plotId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plot      Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)

  @@index([plotId])
}

model PlotCadastral {
  id        String   @id @default(cuid())
  number    String
  plotId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plot      Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)

  @@index([plotId])
}

model PlotCommunication {
  id          String   @id @default(cuid())
  name        String
  type        String
  description String
  plotId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  plot        Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)

  @@index([plotId])
}

model PlotFeature {
  id          String   @id @default(cuid())
  name        String
  title       String
  description String
  plotId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  plot        Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)

  @@index([plotId])
}

model Quiz {
  id           String         @id @default(cuid())
  title        String
  description  String
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  applications Application[]
  questions    QuizQuestion[]
  results      QuizResult[]
}

model QuizQuestion {
  id          String       @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  order       Int
  type        String
  isRequired  Boolean      @default(true)
  quizId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  answers     QuizAnswer[]
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([order])
}

model QuizAnswer {
  id         String       @id @default(cuid())
  text       String
  imageUrl   String?
  order      Int
  questionId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([order])
}

model QuizResult {
  id        String   @id @default(cuid())
  name      String?
  email     String?
  phone     String?
  answers   String
  quizId    String
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model Application {
  id          String    @id @default(cuid())
  type        String
  name        String
  email       String
  phone       String
  message     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String    @default("NEW")
  plotId      String?
  quizId      String?
  quizAnswers Json?
  quiz        Quiz?     @relation(fields: [quizId], references: [id])
  plot        Plot?     @relation(fields: [plotId], references: [id])
  comments    Comment[]
}

model Comment {
  id            String      @id @default(cuid())
  text          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  applicationId String
  authorId      String
  author        User        @relation(fields: [authorId], references: [id])
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model PageVisit {
  id        String   @id @default(cuid())
  path      String
  userAgent String?
  ip        String?
  referer   String?
  createdAt DateTime @default(now())
}
